{"ast":null,"code":"const {\n  parseURL\n} = require('../util');\n\nconst Constants = require('../util/Constants');\n/**\n * Represents a YouTube channel\n * @class\n */\n\n\nclass Channel {\n  /**\n   * @param {YouTube} youtube The YouTube instance creating this\n   * @param {Object} data The data of the channel\n   */\n  constructor(youtube, data) {\n    /**\n     * The YouTube instance that created this\n     * @type {YouTube}\n     */\n    this.youtube = youtube;\n    Object.defineProperty(this, 'youtube', {\n      enumerable: false\n    });\n    /**\n     * The type to filter search results\n     * @type {string}\n     */\n\n    this.type = 'channel';\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (!data) return;\n    /**\n     * Raw data from the YouTube API\n     * @type {object}\n     */\n\n    this.raw = data;\n    /**\n     * Whether this is a full channel object.\n     * @type {boolean}\n     */\n\n    this.full = data.kind === Constants.KINDS.Channel;\n    /**\n     * The YouTube resource from which this channel was created.\n     * @type {string}\n     */\n\n    this.kind = data.kind;\n    /**\n     * This channel's ID\n     * @type {string}\n     * @name Channel#id\n     */\n\n    /**\n     * This channel's title\n     * @type {?string}\n     * @name Channel#title\n     */\n\n    switch (data.kind) {\n      case Constants.KINDS.Playlist:\n      case Constants.KINDS.PlaylistItem:\n      case Constants.KINDS.Video:\n        if (data.snippet) {\n          this.id = data.snippet.channelId;\n          this.title = data.snippet.channelTitle;\n          break;\n        } else {\n          throw new Error('Attempted to make a channel out of a resource with no channel data.');\n        }\n\n      case Constants.KINDS.SearchResult:\n        if (data.id.kind === Constants.KINDS.Channel) {\n          this.id = data.id.channelId;\n          break;\n        } else if (data.snippet) {\n          this.id = data.snippet.channelId;\n          this.title = data.snippet.channelTitle;\n          break;\n        } else {\n          throw new Error('Attempted to make a channel out of a search result with no channel data.');\n        }\n\n      case Constants.KINDS.Channel:\n        this.id = data.id;\n\n        if (data.snippet) {\n          this.title = data.snippet.title;\n          /**\n           * This channel's description\n           * @type {?string}\n           * @name Channel#description\n           */\n\n          this.description = data.snippet.description;\n          /**\n           * The channel's custom URL if it has one\n           * @type {?string}\n           */\n\n          this.customURL = data.snippet.customUrl;\n          /**\n           * The channel's creation date\n           * @type {?Date}\n           * @name Channel#publishedAt\n           */\n\n          this.publishedAt = new Date(data.snippet.publishedAt);\n          /**\n           * The channel's thumbnails: available types are 'default', 'medium', and 'high'\n           * @type {?Object.<string, Thumbnail>}\n           */\n\n          this.thumbnails = data.snippet.thumbnails;\n          /**\n           * The channel's default language\n           * @type {?string}\n           */\n\n          this.defaultLanguage = data.snippet.defaultLanguage;\n          /**\n           * Information about the channel as specified in the `hl` query parameter\n           * @type {?{title: string, description: string}}\n           */\n\n          this.localized = data.snippet.localized;\n          /**\n           * The country of the channel\n           * @type {?string}\n           */\n\n          this.country = data.snippet.country;\n        }\n\n        if (data.contentDetails) {\n          /**\n           * Playlists associated with this channel; all values are playlist IDs\n           * @type {?Object}\n           * @property {?string} likes The channel's liked videos\n           * @property {?string} favorites The channel's favorited videos (note: favorited videos are deprecated)\n           * @property {?string} uploads The channel's uploaded videos\n           */\n          this.relatedPlaylists = data.contentDetails.relatedPlaylists;\n        }\n\n        if (data.statistics) {\n          /**\n           * The number of times the channel has been viewed\n           * @type {?number}\n           */\n          this.viewCount = data.statistics.viewCount;\n          /**\n           * The number of comments on the channel\n           * @type {?number}\n           */\n\n          this.commentCount = data.statistics.commentCount;\n          /**\n           * The number of subscribers the channel has\n           * @type {?number}\n           */\n\n          this.subscriberCount = data.statistics.subscriberCount;\n          /**\n           * Whether the channel's subscriber count is public\n           * @type {?boolean}\n           */\n\n          this.hiddenSubscriberCount = data.statistics.hiddenSubscriberCount;\n          /**\n           * The number of videos this channel has uploaded\n           * @type {?number}\n           */\n\n          this.videoCount = data.statistics.videoCount;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unknown channel kind: ${data.kind}.`);\n    }\n\n    return this;\n  }\n  /**\n   * Fetch the full representation of this channel.\n   * @param {object} [options] Any extra query params\n   * @returns {Channel}\n   */\n\n\n  fetch(options) {\n    return this.youtube.request.getChannel(this.id, options).then(this._patch.bind(this));\n  }\n  /**\n   * The URL to this channel\n   * @type {string}\n   */\n\n\n  get url() {\n    return `https://www.youtube.com/channel/${this.id}`;\n  }\n  /**\n   * Get a channel ID from a string (URL or ID)\n   * @param {string} url The string to get the ID from\n   * @returns {?string}\n   */\n\n\n  static extractID(url) {\n    return parseURL(url).channel;\n  }\n\n}\n\nmodule.exports = Channel;","map":{"version":3,"names":["parseURL","require","Constants","Channel","constructor","youtube","data","Object","defineProperty","enumerable","type","_patch","raw","full","kind","KINDS","Playlist","PlaylistItem","Video","snippet","id","channelId","title","channelTitle","Error","SearchResult","description","customURL","customUrl","publishedAt","Date","thumbnails","defaultLanguage","localized","country","contentDetails","relatedPlaylists","statistics","viewCount","commentCount","subscriberCount","hiddenSubscriberCount","videoCount","fetch","options","request","getChannel","then","bind","url","extractID","channel","module","exports"],"sources":["/Users/ismaelmahamadou/Desktop/creact-intra/youtube/youtube-clone/node_modules/simple-youtube-api/src/structures/Channel.js"],"sourcesContent":["const { parseURL } = require('../util');\nconst Constants = require('../util/Constants');\n\n/**\n * Represents a YouTube channel\n * @class\n */\nclass Channel {\n    /**\n     * @param {YouTube} youtube The YouTube instance creating this\n     * @param {Object} data The data of the channel\n     */\n    constructor(youtube, data) {\n        /**\n         * The YouTube instance that created this\n         * @type {YouTube}\n         */\n        this.youtube = youtube;\n        Object.defineProperty(this, 'youtube', { enumerable: false });\n\n        /**\n         * The type to filter search results\n         * @type {string}\n         */\n        this.type = 'channel';\n\n        this._patch(data);\n    }\n\n    _patch(data) {\n        if (!data) return;\n\n        /**\n         * Raw data from the YouTube API\n         * @type {object}\n         */\n        this.raw = data;\n\n        /**\n         * Whether this is a full channel object.\n         * @type {boolean}\n         */\n        this.full = data.kind === Constants.KINDS.Channel;\n\n        /**\n         * The YouTube resource from which this channel was created.\n         * @type {string}\n         */\n        this.kind = data.kind;\n\n        /**\n         * This channel's ID\n         * @type {string}\n         * @name Channel#id\n         */\n\n        /**\n         * This channel's title\n         * @type {?string}\n         * @name Channel#title\n         */\n\n        switch (data.kind) {\n            case Constants.KINDS.Playlist:\n            case Constants.KINDS.PlaylistItem:\n            case Constants.KINDS.Video:\n                if (data.snippet) {\n                    this.id = data.snippet.channelId;\n                    this.title = data.snippet.channelTitle;\n                    break;\n                } else {\n                    throw new Error('Attempted to make a channel out of a resource with no channel data.');\n                }\n            case Constants.KINDS.SearchResult:\n                if (data.id.kind === Constants.KINDS.Channel) {\n                    this.id = data.id.channelId;\n                    break;\n                } else if (data.snippet) {\n                    this.id = data.snippet.channelId;\n                    this.title = data.snippet.channelTitle;\n                    break;\n                } else {\n                    throw new Error('Attempted to make a channel out of a search result with no channel data.');\n                }\n            case Constants.KINDS.Channel:\n                this.id = data.id;\n                if (data.snippet) {\n                    this.title = data.snippet.title;\n\n                    /**\n                     * This channel's description\n                     * @type {?string}\n                     * @name Channel#description\n                     */\n                    this.description = data.snippet.description;\n\n                    /**\n                     * The channel's custom URL if it has one\n                     * @type {?string}\n                     */\n                    this.customURL = data.snippet.customUrl;\n\n                    /**\n                     * The channel's creation date\n                     * @type {?Date}\n                     * @name Channel#publishedAt\n                     */\n                    this.publishedAt = new Date(data.snippet.publishedAt);\n\n                    /**\n                     * The channel's thumbnails: available types are 'default', 'medium', and 'high'\n                     * @type {?Object.<string, Thumbnail>}\n                     */\n                    this.thumbnails = data.snippet.thumbnails;\n\n                    /**\n                     * The channel's default language\n                     * @type {?string}\n                     */\n                    this.defaultLanguage = data.snippet.defaultLanguage;\n\n                    /**\n                     * Information about the channel as specified in the `hl` query parameter\n                     * @type {?{title: string, description: string}}\n                     */\n                    this.localized = data.snippet.localized;\n\n                    /**\n                     * The country of the channel\n                     * @type {?string}\n                     */\n                    this.country = data.snippet.country;\n                }\n\n                if (data.contentDetails) {\n                    /**\n                     * Playlists associated with this channel; all values are playlist IDs\n                     * @type {?Object}\n                     * @property {?string} likes The channel's liked videos\n                     * @property {?string} favorites The channel's favorited videos (note: favorited videos are deprecated)\n                     * @property {?string} uploads The channel's uploaded videos\n                     */\n                    this.relatedPlaylists = data.contentDetails.relatedPlaylists;\n                }\n\n                if (data.statistics) {\n                    /**\n                     * The number of times the channel has been viewed\n                     * @type {?number}\n                     */\n                    this.viewCount = data.statistics.viewCount;\n\n                    /**\n                     * The number of comments on the channel\n                     * @type {?number}\n                     */\n                    this.commentCount = data.statistics.commentCount;\n\n                    /**\n                     * The number of subscribers the channel has\n                     * @type {?number}\n                     */\n                    this.subscriberCount = data.statistics.subscriberCount;\n\n                    /**\n                     * Whether the channel's subscriber count is public\n                     * @type {?boolean}\n                     */\n                    this.hiddenSubscriberCount = data.statistics.hiddenSubscriberCount;\n\n                    /**\n                     * The number of videos this channel has uploaded\n                     * @type {?number}\n                     */\n                    this.videoCount = data.statistics.videoCount;\n                }\n                break;\n            default:\n                throw new Error(`Unknown channel kind: ${data.kind}.`);\n        }\n\n        return this;\n    }\n\n    /**\n     * Fetch the full representation of this channel.\n     * @param {object} [options] Any extra query params\n     * @returns {Channel}\n     */\n    fetch(options) {\n        return this.youtube.request.getChannel(this.id, options).then(this._patch.bind(this));\n    }\n\n    /**\n     * The URL to this channel\n     * @type {string}\n     */\n    get url() {\n        return `https://www.youtube.com/channel/${this.id}`;\n    }\n\n    /**\n     * Get a channel ID from a string (URL or ID)\n     * @param {string} url The string to get the ID from\n     * @returns {?string}\n     */\n    static extractID(url) {\n        return parseURL(url).channel;\n    }\n}\n\nmodule.exports = Channel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}