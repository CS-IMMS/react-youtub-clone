{"ast":null,"code":"const Request = require('./Request');\n\nconst Video = require('./structures/Video');\n\nconst Playlist = require('./structures/Playlist');\n\nconst Channel = require('./structures/Channel');\n\nconst util = require('./util');\n\nconst Constants = require('./util/Constants');\n/**\n * Information about a thumbnail\n * @typedef {Object} Thumbnail\n * @property {string} url The URL of this thumbnail\n * @property {number} width The width of this thumbnail\n * @property {number} height The height of this thumbnail\n */\n\n/**\n * The YouTube API module\n */\n\n\nclass YouTube {\n  /**\n   * @param {string} key The YouTube Data API v3 key to use\n   */\n  constructor(key) {\n    if (typeof key !== 'string') throw new Error('The YouTube API key you provided was not a string.');\n    /**\n     * The YouTube Data API v3 key\n     * @type {?string}\n     */\n\n    this.key = key;\n    Object.defineProperty(this, 'key', {\n      enumerable: false\n    });\n    this.request = new Request(this);\n  }\n  /**\n   * Make a request to the YouTube API\n   * @param {string} endpoint The endpoint of the API\n   * @param {Object} qs The query string options\n   * @returns {Promise<Object>}\n   */\n\n  /**\n   * Get a video by URL or ID\n   * @param {string} url The video URL or ID\n   * @param {Object} [options = {}] Options to request with the video.\n   * @returns {Promise<?Video>}\n   * @example\n   * API.getVideo('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n   *  .then(video => {\n   *    if (video) console.log(`The video's title is ${video.title}`);\n   *    else console.log('video not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getVideo(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = Video.extractID(url);\n    if (!id) return Promise.reject(new Error(`No video ID found in URL: ${url}`));\n    return this.getVideoByID(id, options);\n  }\n  /**\n   * Get a video by ID\n   * @param {string} id The video ID\n   * @param {Object} [options = {}] Options to request with the video.\n   * @returns {Promise<?Video>}\n   * @example\n   * API.getVideoByID('3odIdmuFfEY')\n   *  .then(video => {\n   *    if (video) console.log(`The video's title is ${video.title}`);\n   *    else console.log('video not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getVideoByID(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.request.getVideo(id, options).then(result => result ? new Video(this, result) : null);\n  }\n  /**\n   * Get a playlist by URL or ID\n   * @param {string} url The playlist URL or ID\n   * @param {Object} [options = {}] Options to request with the playlist.\n   * @returns {Promise<?Playlist>}\n   * @example\n   * API.getPlaylist('https://www.youtube.com/playlist?list=PLuY9odN8x9puRuCxiddyRzJ3F5jR-Gun9')\n   *  .then(playlist => {\n   *    if (playlist) console.log(`The playlist's title is ${playlist.title}`);\n   *    else console.log('playlist not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getPlaylist(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = Playlist.extractID(url);\n    if (!id) return Promise.reject(new Error(`No playlist ID found in URL: ${url}`));\n    return this.getPlaylistByID(id, options);\n  }\n  /**\n   * Get a playlist by ID\n   * @param {string} id The playlist ID\n   * @param {Object} [options = {}] Options to request with the playlist.\n   * @returns {Promise<?Playlist>}\n   * @example\n   * API.getPlaylistByID('PL2BN1Zd8U_MsyMeK8r9Vdv1lnQGtoJaSa')\n   *  .then(playlist => {\n   *    if (playlist) console.log(`The playlist's title is ${playlist.title}`);\n   *    else console.log('playlist not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getPlaylistByID(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.request.getPlaylist(id, options).then(result => result ? new Playlist(this, result) : null);\n  }\n  /**\n   * Get a channel by URL or ID\n   * @param {string} url The channel URL or ID\n   * @param {Object} [options = {}] Options to request with the channel.\n   * @returns {Promise<?Channel>}\n   * @example\n   * API.getChannel('https://www.youtube.com/channel/UC477Kvszl9JivqOxN1dFgPQ')\n   *  .then(channel => {\n   *    if (channel) console.log(`The channel's title is ${channel.title}`);\n   *    else console.log('channel not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getChannel(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = Channel.extractID(url);\n    if (!id) return Promise.reject(new Error(`No channel ID found in URL: ${url}`));\n    return this.getChannelByID(id, options);\n  }\n  /**\n   * Get a channel by ID\n   * @param {string} id The channel ID\n   * @param {Object} [options = {}] Options to request with the channel.\n   * @returns {Promise<?Channel>}\n   * @example\n   * API.getChannelByID('UC477Kvszl9JivqOxN1dFgPQ')\n   *  .then(channel => {\n   *    if (channel) console.log(`The channel's title is ${channel.title}`);\n   *    else console.log('channel not found :(');\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  getChannelByID(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.request.getChannel(id, options).then(result => result ? new Channel(this, result) : null);\n  }\n  /**\n   * Search YouTube for videos, playlists, and channels\n   * @param {string} query The string to search for\n   * @param {number} [limit = 5] Maximum results to obtain\n   * @param {Object} [options] Additional options to pass to the API request\n   * @returns {Promise<Array<Video|Playlist|Channel|null>>}\n   * @example\n   * API.search('Centuries')\n   *  .then(results => {\n   *    console.log(`I got ${results.length} results`);\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  search(query) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.request.getPaginated(Constants.ENDPOINTS.Search, limit, Object.assign(options, {\n      q: query,\n      part: Constants.PARTS.Search\n    })).then(result => result.map(item => {\n      if (item.id.kind === Constants.KINDS.Video) return new Video(this, item);\n      if (item.id.kind === Constants.KINDS.Playlist) return new Playlist(this, item);\n      if (item.id.kind === Constants.KINDS.Channel) return new Channel(this, item);\n      return null;\n    }));\n  }\n  /**\n   * Search YouTube for videos\n   * @param {string} query The string to search for\n   * @param {number} [limit = 5] Maximum results to obtain\n   * @param {Object} [options] Additional options to pass to the API request\n   * @returns {Promise<Video[]>}\n   * @example\n   * API.searchVideos('Centuries')\n   *  .then(results => {\n   *    console.log(`I got ${results.length} videos`);\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  searchVideos(query) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.search(query, limit, Object.assign(options, {\n      type: 'video'\n    }));\n  }\n  /**\n   * Search YouTube for playlists\n   * @param {string} query The string to search for\n   * @param {number} [limit = 5] Maximum results to obtain\n   * @param {Object} [options] Additional options to pass to the API request\n   * @returns {Promise<Playlist[]>}\n   * @example\n   * API.searchPlaylists('Centuries')\n   *  .then(results => {\n   *    console.log(`I got ${results.length} playlists`);\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  searchPlaylists(query) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.search(query, limit, Object.assign(options, {\n      type: 'playlist'\n    }));\n  }\n  /**\n   * Search YouTube for channels\n   * @param {string} query The string to search for\n   * @param {number} [limit = 5] Maximum results to obtain\n   * @param {Object} [options] Additional options to pass to the API request\n   * @returns {Promise<Channel[]>}\n   * @example\n   * API.searchChannels('Centuries')\n   *  .then(results => {\n   *    console.log(`I got ${results.length} channels`);\n   *  })\n   *  .catch(console.error);\n   */\n\n\n  searchChannels(query) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.search(query, limit, Object.assign(options, {\n      type: 'channel'\n    }));\n  }\n\n}\n\nYouTube.Video = Video;\nYouTube.Playlist = Playlist;\nYouTube.Channel = Channel;\nYouTube.util = util;\nmodule.exports = YouTube;","map":{"version":3,"names":["Request","require","Video","Playlist","Channel","util","Constants","YouTube","constructor","key","Error","Object","defineProperty","enumerable","request","getVideo","url","options","id","extractID","Promise","reject","getVideoByID","then","result","getPlaylist","getPlaylistByID","getChannel","getChannelByID","search","query","limit","getPaginated","ENDPOINTS","Search","assign","q","part","PARTS","map","item","kind","KINDS","searchVideos","type","searchPlaylists","searchChannels","module","exports"],"sources":["/Users/ismaelmahamadou/Desktop/creact-intra/youtube/youtube-clone/node_modules/simple-youtube-api/src/index.js"],"sourcesContent":["const Request = require('./Request');\n\nconst Video = require('./structures/Video');\nconst Playlist = require('./structures/Playlist');\nconst Channel = require('./structures/Channel');\n\nconst util = require('./util');\nconst Constants = require('./util/Constants');\n\n/**\n * Information about a thumbnail\n * @typedef {Object} Thumbnail\n * @property {string} url The URL of this thumbnail\n * @property {number} width The width of this thumbnail\n * @property {number} height The height of this thumbnail\n */\n\n/**\n * The YouTube API module\n */\nclass YouTube {\n    /**\n     * @param {string} key The YouTube Data API v3 key to use\n     */\n    constructor(key) {\n        if (typeof key !== 'string') throw new Error('The YouTube API key you provided was not a string.');\n        /**\n         * The YouTube Data API v3 key\n         * @type {?string}\n         */\n        this.key = key;\n        Object.defineProperty(this, 'key', { enumerable: false });\n\n        this.request = new Request(this);\n    }\n\n    /**\n     * Make a request to the YouTube API\n     * @param {string} endpoint The endpoint of the API\n     * @param {Object} qs The query string options\n     * @returns {Promise<Object>}\n     */\n\n    /**\n     * Get a video by URL or ID\n     * @param {string} url The video URL or ID\n     * @param {Object} [options = {}] Options to request with the video.\n     * @returns {Promise<?Video>}\n     * @example\n     * API.getVideo('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n     *  .then(video => {\n     *    if (video) console.log(`The video's title is ${video.title}`);\n     *    else console.log('video not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getVideo(url, options = {}) {\n        const id = Video.extractID(url);\n        if (!id) return Promise.reject(new Error(`No video ID found in URL: ${url}`));\n        return this.getVideoByID(id, options);\n    }\n\n    /**\n     * Get a video by ID\n     * @param {string} id The video ID\n     * @param {Object} [options = {}] Options to request with the video.\n     * @returns {Promise<?Video>}\n     * @example\n     * API.getVideoByID('3odIdmuFfEY')\n     *  .then(video => {\n     *    if (video) console.log(`The video's title is ${video.title}`);\n     *    else console.log('video not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getVideoByID(id, options = {}) {\n        return this.request.getVideo(id, options).then(result => result ? new Video(this, result) : null);\n    }\n\n    /**\n     * Get a playlist by URL or ID\n     * @param {string} url The playlist URL or ID\n     * @param {Object} [options = {}] Options to request with the playlist.\n     * @returns {Promise<?Playlist>}\n     * @example\n     * API.getPlaylist('https://www.youtube.com/playlist?list=PLuY9odN8x9puRuCxiddyRzJ3F5jR-Gun9')\n     *  .then(playlist => {\n     *    if (playlist) console.log(`The playlist's title is ${playlist.title}`);\n     *    else console.log('playlist not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getPlaylist(url, options = {}) {\n        const id = Playlist.extractID(url);\n        if (!id) return Promise.reject(new Error(`No playlist ID found in URL: ${url}`));\n        return this.getPlaylistByID(id, options);\n    }\n\n    /**\n     * Get a playlist by ID\n     * @param {string} id The playlist ID\n     * @param {Object} [options = {}] Options to request with the playlist.\n     * @returns {Promise<?Playlist>}\n     * @example\n     * API.getPlaylistByID('PL2BN1Zd8U_MsyMeK8r9Vdv1lnQGtoJaSa')\n     *  .then(playlist => {\n     *    if (playlist) console.log(`The playlist's title is ${playlist.title}`);\n     *    else console.log('playlist not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getPlaylistByID(id, options = {}) {\n        return this.request.getPlaylist(id, options).then(result => result ? new Playlist(this, result) : null);\n    }\n\n    /**\n     * Get a channel by URL or ID\n     * @param {string} url The channel URL or ID\n     * @param {Object} [options = {}] Options to request with the channel.\n     * @returns {Promise<?Channel>}\n     * @example\n     * API.getChannel('https://www.youtube.com/channel/UC477Kvszl9JivqOxN1dFgPQ')\n     *  .then(channel => {\n     *    if (channel) console.log(`The channel's title is ${channel.title}`);\n     *    else console.log('channel not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getChannel(url, options = {}) {\n        const id = Channel.extractID(url);\n        if (!id) return Promise.reject(new Error(`No channel ID found in URL: ${url}`));\n        return this.getChannelByID(id, options);\n    }\n\n    /**\n     * Get a channel by ID\n     * @param {string} id The channel ID\n     * @param {Object} [options = {}] Options to request with the channel.\n     * @returns {Promise<?Channel>}\n     * @example\n     * API.getChannelByID('UC477Kvszl9JivqOxN1dFgPQ')\n     *  .then(channel => {\n     *    if (channel) console.log(`The channel's title is ${channel.title}`);\n     *    else console.log('channel not found :(');\n     *  })\n     *  .catch(console.error);\n     */\n    getChannelByID(id, options = {}) {\n        return this.request.getChannel(id, options).then(result => result ? new Channel(this, result) : null);\n    }\n\n    /**\n     * Search YouTube for videos, playlists, and channels\n     * @param {string} query The string to search for\n     * @param {number} [limit = 5] Maximum results to obtain\n     * @param {Object} [options] Additional options to pass to the API request\n     * @returns {Promise<Array<Video|Playlist|Channel|null>>}\n     * @example\n     * API.search('Centuries')\n     *  .then(results => {\n     *    console.log(`I got ${results.length} results`);\n     *  })\n     *  .catch(console.error);\n     */\n    search(query, limit = 5, options = {}) {\n        return this.request.getPaginated(Constants.ENDPOINTS.Search, limit, Object.assign(options, { q: query, part: Constants.PARTS.Search }))\n            .then(result => result.map(item => {\n                if (item.id.kind === Constants.KINDS.Video) return new Video(this, item);\n                if (item.id.kind === Constants.KINDS.Playlist) return new Playlist(this, item);\n                if (item.id.kind === Constants.KINDS.Channel) return new Channel(this, item);\n                return null;\n            }));\n    }\n\n    /**\n     * Search YouTube for videos\n     * @param {string} query The string to search for\n     * @param {number} [limit = 5] Maximum results to obtain\n     * @param {Object} [options] Additional options to pass to the API request\n     * @returns {Promise<Video[]>}\n     * @example\n     * API.searchVideos('Centuries')\n     *  .then(results => {\n     *    console.log(`I got ${results.length} videos`);\n     *  })\n     *  .catch(console.error);\n     */\n    searchVideos(query, limit = 5, options = {}) {\n        return this.search(query, limit, Object.assign(options, { type: 'video' }));\n    }\n\n    /**\n     * Search YouTube for playlists\n     * @param {string} query The string to search for\n     * @param {number} [limit = 5] Maximum results to obtain\n     * @param {Object} [options] Additional options to pass to the API request\n     * @returns {Promise<Playlist[]>}\n     * @example\n     * API.searchPlaylists('Centuries')\n     *  .then(results => {\n     *    console.log(`I got ${results.length} playlists`);\n     *  })\n     *  .catch(console.error);\n     */\n    searchPlaylists(query, limit = 5, options = {}) {\n        return this.search(query, limit, Object.assign(options, { type: 'playlist' }));\n    }\n\n    /**\n     * Search YouTube for channels\n     * @param {string} query The string to search for\n     * @param {number} [limit = 5] Maximum results to obtain\n     * @param {Object} [options] Additional options to pass to the API request\n     * @returns {Promise<Channel[]>}\n     * @example\n     * API.searchChannels('Centuries')\n     *  .then(results => {\n     *    console.log(`I got ${results.length} channels`);\n     *  })\n     *  .catch(console.error);\n     */\n    searchChannels(query, limit = 5, options = {}) {\n        return this.search(query, limit, Object.assign(options, { type: 'channel' }));\n    }\n}\n\nYouTube.Video = Video;\nYouTube.Playlist = Playlist;\nYouTube.Channel = Channel;\nYouTube.util = util;\n\nmodule.exports = YouTube;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}