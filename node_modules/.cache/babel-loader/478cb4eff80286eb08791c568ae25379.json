{"ast":null,"code":"const duration = require('iso8601-duration');\n\nconst {\n  parseURL\n} = require('../util');\n\nconst Constants = require('../util/Constants');\n\nconst Channel = require('./Channel');\n/** Represents a YouTube video */\n\n\nclass Video {\n  /**\n   * @param {YouTube} youtube The YouTube instance creating this\n   * @param {Object} data The data of the video\n   */\n  constructor(youtube, data) {\n    /**\n     * The YouTube instance that created this\n     * @type {YouTube}\n     */\n    this.youtube = youtube;\n    Object.defineProperty(this, 'youtube', {\n      enumerable: false\n    });\n    /**\n     * The type to filter search results\n     * @type {string}\n     */\n\n    this.type = 'video';\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (!data) return;\n    /**\n     * The raw data from the YouTube API.\n     * @type {object}\n     */\n\n    this.raw = data;\n    /**\n     * Whether this is a full (returned from the videos API end point) or partial video (returned\n     * as part of another resource).\n     * @type {boolean}\n     */\n\n    this.full = data.kind === Constants.KINDS.Video;\n    /**\n     * The resource that this video was created from.\n     * @type {string}\n     */\n\n    this.kind = data.kind;\n    /**\n     * This video's ID\n     * @type {string}\n     * @name Video#id\n     */\n\n    switch (data.kind) {\n      case Constants.KINDS.PlaylistItem:\n        if (data.snippet) {\n          if (data.snippet.resourceId.kind === Constants.KINDS.Video) this.id = data.snippet.resourceId.videoId;else throw new Error('Attempted to make a video out of a non-video playlist item.');\n          break;\n        } else {\n          throw new Error('Attempted to make a video out of a playlist item with no video data.');\n        }\n\n      case Constants.KINDS.Video:\n        this.id = data.id;\n        break;\n\n      case Constants.KINDS.SearchResult:\n        if (data.id.kind === Constants.KINDS.Video) this.id = data.id.videoId;else throw new Error('Attempted to make a video out of a non-video search result.');\n        break;\n\n      default:\n        throw new Error(`Unknown video kind: ${data.kind}.`);\n    }\n\n    if (data.snippet) {\n      /**\n       * This video's title\n       * @type {string}\n       */\n      this.title = data.snippet.title;\n      /**\n       * This video's description\n       * @type {string}\n       */\n\n      this.description = data.snippet.description;\n      /**\n       * The thumbnails of this video.\n       * @type {Object.<'default', 'medium', 'high', 'standard', 'maxres'>}\n       */\n\n      this.thumbnails = data.snippet.thumbnails;\n      /**\n       * The date/time this video was published\n       * @type {Date}\n       */\n\n      this.publishedAt = new Date(data.snippet.publishedAt);\n      /**\n       * The channel this video is in.\n       * @type {Channel}\n       */\n\n      this.channel = new Channel(this.youtube, data);\n    }\n\n    if (data.contentDetails) {\n      /**\n       * An object containing time period information. All properties are integers, and do not include the lower\n       * precision ones.\n       * @typedef {Object} DurationObject\n       * @property {number} [hours] How many hours the video is long\n       * @property {number} [minutes] How many minutes the video is long\n       * @property {number} [seconds] How many seconds the video is long\n       */\n\n      /**\n       * The duration of the video\n       * @type {?DurationObject}\n       */\n      this.duration = data.contentDetails.duration ? duration.parse(data.contentDetails.duration) : null;\n    }\n\n    return this;\n  }\n  /**\n   * The maxiumum available resolution thumbnail.\n   * @type {object}\n   */\n\n\n  get maxRes() {\n    const t = this.thumbnails;\n    return t.maxres || t.standard || t.high || t.medium || t.default;\n  }\n  /**\n   * The URL to this video\n   * @type {string}\n   */\n\n\n  get url() {\n    return `https://www.youtube.com/watch?v=${this.id}`;\n  }\n  /**\n   * The short URL to this video\n   * @type {string}\n   */\n\n\n  get shortURL() {\n    return `https://youtu.be/${this.id}`;\n  }\n  /**\n   * The duration of the video in seconds\n   * @type {number}\n   */\n\n\n  get durationSeconds() {\n    return this.duration ? duration.toSeconds(this.duration) : -1;\n  }\n  /**\n   * Fetch the full representation of this video.\n   * @param {object} [options] Any extra query params\n   * @returns {Video}\n   */\n\n\n  fetch(options) {\n    return this.youtube.request.getVideo(this.id, options).then(this._patch.bind(this));\n  }\n  /**\n   * Get a video ID from a string (URL or ID)\n   * @param {string} url The string to get the ID from\n   * @returns {?string}\n   */\n\n\n  static extractID(url) {\n    return parseURL(url).video;\n  }\n\n}\n\nmodule.exports = Video;","map":{"version":3,"names":["duration","require","parseURL","Constants","Channel","Video","constructor","youtube","data","Object","defineProperty","enumerable","type","_patch","raw","full","kind","KINDS","PlaylistItem","snippet","resourceId","id","videoId","Error","SearchResult","title","description","thumbnails","publishedAt","Date","channel","contentDetails","parse","maxRes","t","maxres","standard","high","medium","default","url","shortURL","durationSeconds","toSeconds","fetch","options","request","getVideo","then","bind","extractID","video","module","exports"],"sources":["/Users/ismaelmahamadou/Desktop/creact-intra/youtube/youtube-clone/node_modules/simple-youtube-api/src/structures/Video.js"],"sourcesContent":["const duration = require('iso8601-duration');\nconst { parseURL } = require('../util');\nconst Constants = require('../util/Constants');\nconst Channel = require('./Channel');\n\n/** Represents a YouTube video */\nclass Video {\n    /**\n     * @param {YouTube} youtube The YouTube instance creating this\n     * @param {Object} data The data of the video\n     */\n    constructor(youtube, data) {\n        /**\n         * The YouTube instance that created this\n         * @type {YouTube}\n         */\n        this.youtube = youtube;\n        Object.defineProperty(this, 'youtube', { enumerable: false });\n\n        /**\n         * The type to filter search results\n         * @type {string}\n         */\n        this.type = 'video';\n\n        this._patch(data);\n    }\n\n    _patch(data) {\n        if (!data) return;\n\n        /**\n         * The raw data from the YouTube API.\n         * @type {object}\n         */\n        this.raw = data;\n\n        /**\n         * Whether this is a full (returned from the videos API end point) or partial video (returned\n         * as part of another resource).\n         * @type {boolean}\n         */\n        this.full = data.kind === Constants.KINDS.Video;\n\n        /**\n         * The resource that this video was created from.\n         * @type {string}\n         */\n        this.kind = data.kind;\n\n        /**\n         * This video's ID\n         * @type {string}\n         * @name Video#id\n         */\n\n        switch (data.kind) {\n            case Constants.KINDS.PlaylistItem:\n                if (data.snippet) {\n                    if (data.snippet.resourceId.kind === Constants.KINDS.Video) this.id = data.snippet.resourceId.videoId;\n                    else throw new Error('Attempted to make a video out of a non-video playlist item.');\n                    break;\n                } else {\n                    throw new Error('Attempted to make a video out of a playlist item with no video data.');\n                }\n            case Constants.KINDS.Video:\n                this.id = data.id;\n                break;\n            case Constants.KINDS.SearchResult:\n                if (data.id.kind === Constants.KINDS.Video) this.id = data.id.videoId;\n                else throw new Error('Attempted to make a video out of a non-video search result.');\n                break;\n            default:\n                throw new Error(`Unknown video kind: ${data.kind}.`);\n        }\n\n        if (data.snippet) {\n            /**\n             * This video's title\n             * @type {string}\n             */\n            this.title = data.snippet.title;\n\n            /**\n             * This video's description\n             * @type {string}\n             */\n            this.description = data.snippet.description;\n\n            /**\n             * The thumbnails of this video.\n             * @type {Object.<'default', 'medium', 'high', 'standard', 'maxres'>}\n             */\n            this.thumbnails = data.snippet.thumbnails;\n\n            /**\n             * The date/time this video was published\n             * @type {Date}\n             */\n            this.publishedAt = new Date(data.snippet.publishedAt);\n\n            /**\n             * The channel this video is in.\n             * @type {Channel}\n             */\n            this.channel = new Channel(this.youtube, data);\n        }\n\n        if(data.contentDetails) {\n            /**\n             * An object containing time period information. All properties are integers, and do not include the lower\n             * precision ones.\n             * @typedef {Object} DurationObject\n             * @property {number} [hours] How many hours the video is long\n             * @property {number} [minutes] How many minutes the video is long\n             * @property {number} [seconds] How many seconds the video is long\n             */\n\n            /**\n             * The duration of the video\n             * @type {?DurationObject}\n             */\n            this.duration = data.contentDetails.duration ? duration.parse(data.contentDetails.duration) : null;\n        }\n\n        return this;\n    }\n\n    /**\n     * The maxiumum available resolution thumbnail.\n     * @type {object}\n     */\n    get maxRes() {\n        const t = this.thumbnails;\n        return t.maxres || t.standard || t.high || t.medium || t.default;\n    }\n\n    /**\n     * The URL to this video\n     * @type {string}\n     */\n    get url() {\n        return `https://www.youtube.com/watch?v=${this.id}`;\n    }\n\n    /**\n     * The short URL to this video\n     * @type {string}\n     */\n    get shortURL() {\n        return `https://youtu.be/${this.id}`;\n    }\n\n    /**\n     * The duration of the video in seconds\n     * @type {number}\n     */\n    get durationSeconds() {\n        return this.duration ? duration.toSeconds(this.duration) : -1;\n    }\n\n    /**\n     * Fetch the full representation of this video.\n     * @param {object} [options] Any extra query params\n     * @returns {Video}\n     */\n    fetch(options) {\n        return this.youtube.request.getVideo(this.id, options).then(this._patch.bind(this));\n    }\n\n    /**\n     * Get a video ID from a string (URL or ID)\n     * @param {string} url The string to get the ID from\n     * @returns {?string}\n     */\n    static extractID(url) {\n        return parseURL(url).video;\n    }\n}\n\nmodule.exports = Video;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}